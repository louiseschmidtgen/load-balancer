---

# - name: Install Docker and Docker Compose
#   hosts: all
#   become: yes
#   tasks:
#     - name: Update package manager cache
#       apt:
#         update_cache: yes

#     - name: Install Docker and Docker Compose (Net-tools for debugging)
#       apt:
#         name: ['docker', 'docker-compose', 'net-tools']
#         state: present
#       tags: [docker]

#     - name: Start Docker Daemon
#       become: yes
#       service:
#         name: docker
#         state: started


# - name: Create Expensify User
#   hosts: all
#   become: yes
#   tasks:
#     - name: Create expensify user
#       user:
#         name: expensify
#         state: present
#         shell: /bin/sh

#     - name: Add expensify user to sudo group
#       user:
#         name: expensify
#         groups: sudo
#         append: yes
#       become: yes

#     - name: Add passwordless sudo entry for expensify user
#       lineinfile:
#         path: /etc/sudoers
#         line: "expensify ALL=(ALL) NOPASSWD: ALL"
#         validate: visudo -cf %s

#     - name: Create .ssh directory for expensify user
#       file:
#         path: "/home/expensify/.ssh"
#         state: directory
#         owner: expensify
#         group: expensify
#         mode: '0700'

#     - name: Ensure authorized keys are present for expensify user
#       authorized_key:
#         user: expensify
#         state: present
#         key: "{{ lookup('file', '../vars/authorized_keys.txt') }}"
#       become: yes
    
#     - name: Configure SSH
#       lineinfile:
#         path: "/etc/ssh/sshd_config"
#         regexp: "^PasswordAuthentication"
#         line: "PasswordAuthentication no"
#       notify:
#         - restart sshd
#   handlers:
#       - name: restart sshd
#         service:
#           name: sshd
#           state: restarted

# - name: Deploy Docker Swarm
#   hosts: all
#   become: yes
#   tasks:
#     - name: Initialize Docker Swarm on server-a
#       command: docker swarm init
#       when: "'server-a' in inventory_hostname"

#     - name: Retrieve Docker Swarm join token from manager node
#       command: docker swarm join-token -q worker 
#       register: swarm_token
#       delegate_to: server-a
#       when: "'server-a' not in inventory_hostname"

#     - name: Join Docker Swarm on worker nodes
#       command: docker swarm join --token "{{ swarm_token.stdout.strip() }}" {{ hostvars['server-a']['ansible_default_ipv4']['address'] }}:2377
#       when: "'server-a' not in inventory_hostname"
#       timeout: 600  # Adjust the timeout to a higher value, e.g., 10 minutes

- name: Deploy Services via Swarm Leader
  hosts: server-a
  become: yes
  tasks:
    - name: Copy docker-compose.yml to server-a
      synchronize:
        src: "../docker-compose.yml"
        dest: "/home/expensify/deploy/"
        delete: yes

    - name: Deploy Docker Stack
      command: docker stack deploy -c /home/expensify/deploy/docker-compose.yml expensify_stack
      args:
        chdir: /home/expensify/deploy/  # Specify the working directory
      timeout: 600  # Adjust the timeout to a higher value, e.g., 10 minutes

        
    # - name: Build and Deploy service containers
    #   command: docker-compose -f "/home/expensify/{{ inventory_hostname }}/docker-compose.yml" up -d
    #   tags: [docker, inventory_hostname]
    #   environment:
    #     COMPOSE_HTTP_TIMEOUT: 240  # or a higher value if needed

# - name: Open Docker Swarm Ports
#   hosts: all
#   become: yes
#   tasks:
#     - name: Enabling UFW, allowing all traffic
#       community.general.ufw:
#         state: enabled
#         policy: allow

#     - name: Set logging
#       community.general.ufw:
#         logging: 'on'

#     - name: Allow SSH traffic
#       community.general.ufw:
#         rule: allow
#         port: 22
#         proto: tcp
#       ignore_errors: yes  # Ignore errors in case UFW is already enabled

#     - name: Allow Docker Swarm management port
#       community.general.ufw:
#         rule: allow
#         port: 2377
#         proto: tcp

#     - name: Allow Docker Swarm communication port
#       community.general.ufw:
#         rule: allow
#         port: 7946
#         proto: tcp

#     - name: Allow Docker Swarm overlay network traffic port
#       community.general.ufw:
#         rule: allow
#         port: 4789
#         proto: udp

#     - name: Allow load balancer port range 60000-65000
#       community.general.ufw:
#         rule: allow
#         port: '60000:65000'
#         proto: tcp  # Assuming this is TCP traffic
#       when: "'load-balancer' in inventory_hostname"  # Only apply to the load balancer

#     # - name: Allow load balancer port range 60000-65000
#     #   community.general.ufw:
#     #     rule: allow
#     #     port: "{{ item }}"
#     #     proto: tcp  # Assuming this is TCP traffic
#     #   loop: "{{ range(60000, 65001) }}"
#     #   when: "'load-balancer' in inventory_hostname"  # Only apply to the load balancer

#     - name: Allow load balancer to access web servers on port 80
#       community.general.ufw:
#         rule: allow
#         port: 80
#         proto: tcp
#         from_ip: "{{ hostvars['load-balancer'].ansible_host }}"
#       when: "'load-balancer' in inventory_hostname"  # Only apply to the load balancer

#     - name: Reload UFW to apply rules
#       community.general.ufw:
#         state: enabled
#         policy: allow

#     - name: Restart Docker
#       service:
#         name: docker
#         state: restarted

# - name: Configure Inter-Host Communication
#   hosts: all
#   become: yes
#   tasks:
#     - name: Allow communication between hosts on specific ports
#       community.general.ufw:
#         rule: allow
#         port: "{{ item }}"
#         from_ip: "{{ hostvars[item].ansible_host }}"
#       loop:
#         - "60000-65000"
#         - "80"
#         - "443"

# - name: Open Docker Network Ports
#   hosts: all
#   become: yes
#   tasks:
#     - name: Allow traffic from private IPs on custom network
#       community.general.ufw:
#         rule: allow
#         port: "{{ item }}"
#         from_ip: "{{ hostvars[item]['ansible_host'] }}"
#       loop: "{{ groups['all'] }}"
#       when: "'load-balancer' in item or 'server-a' in item or 'server-b' in item or 'nagios-monitor' in item"


# - name: Add entries to /etc/hosts
#   hosts: all
#   become: yes
#   tasks:
#     - name: Add entries to /etc/hosts for all hosts
#       lineinfile:
#         dest: /etc/hosts
#         line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
#         insertafter: "^127.0.0.1 localhost"
#       loop: "{{ groups['all'] }}"
#       when: "'{{ item }}' != inventory_hostname"


# ---
# - name: Lock Down Network
#   hosts: all
#   become: yes
#   tasks:
#     - name: Allow only one server public ssh access
#       ufw:
#         rule: allow
#         proto: tcp
#         port: 22
#         from_ip: "{{ hostvars['nagios-monitor']['ansible_host'] }}"
#         state: enabled

#     - name: Allow SSH access from that server to others
#       ufw:
#         rule: allow
#         proto: tcp
#         port: 22
#         from_ip: "{{ hostvars['nagios-monitor']['ansible_host'] }}"
#         to_ip: "{{ ansible_default_ipv4.address }}"
#         state: enabled

#     - name: Allow load balancer port range
#       ufw:
#         rule: allow
#         port: "{{ item }}"
#         from_ip: "{{ hostvars['load-balancer'].ansible_host }}"
#       loop: "{{ range(60000, 65001) }}"

#     - name: Allow load balancer to access web servers
#       ufw:
#         rule: allow
#         port: 80
#         proto: tcp
#         from_ip: "{{ hostvars['load-balancer'].ansible_host }}"
      
#     - name: Block unused ports
#       ufw:
#         rule: deny
#         port: "{{ item }}"
#       loop: "{{ range(1, 65536) | difference([22, 80, 60000, 60001, 65000]) }}"
#       # Keep the ports you want to keep open (SSH, HTTP, and your load balancer port range)

