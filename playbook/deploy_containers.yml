---

- name: Install Docker and Docker Compose
  hosts: all
  become: yes
  tasks:
    - name: Update package manager cache
      apt:
        update_cache: yes

    - name: Install Docker and Docker Compose (Net-tools for debugging)
      apt:
        name: ['docker', 'docker-compose', 'net-tools']
        state: present
      tags: [docker]

    - name: Start Docker Daemon
      become: yes
      service:
        name: docker
        state: started


- name: Create Expensify User
  hosts: all
  become: yes
  tasks:
    - name: Create expensify user
      user:
        name: expensify
        state: present
        shell: /bin/sh

    - name: Add expensify user to sudo group
      user:
        name: expensify
        groups: sudo
        append: yes
      become: yes

    - name: Add passwordless sudo entry for expensify user
      lineinfile:
        path: /etc/sudoers
        line: "expensify ALL=(ALL) NOPASSWD: ALL"
        validate: visudo -cf %s

    - name: Create .ssh directory for expensify user
      file:
        path: "/home/expensify/.ssh"
        state: directory
        owner: expensify
        group: expensify
        mode: '0700'

    - name: Ensure authorized keys are present for expensify user
      authorized_key:
        user: expensify
        state: present
        key: "{{ lookup('file', '../vars/authorized_keys.txt') }}"
      become: yes
    
    - name: Configure SSH
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
      notify:
        - restart sshd
  handlers:
      - name: restart sshd
        service:
          name: sshd
          state: restarted

- name: Deploy Docker Swarm
  hosts: all
  become: yes
  tasks:
    - name: Initialize Docker Swarm on nagios-monitor
      command: docker swarm init
      when: "'nagios-monitor' in inventory_hostname"

    - name: Retrieve Docker Swarm join token from manager node
      command: docker swarm join-token -q worker 
      register: swarm_token
      delegate_to: nagios-monitor
      when: "'nagios-monitor' not in inventory_hostname"

    - name: Join Docker Swarm on worker nodes
      command: docker swarm join --token "{{ swarm_token.stdout.strip() }}" {{ hostvars['nagios-monitor']['ansible_default_ipv4']['address'] }}:2377
      when: "'nagios-monitor' not in inventory_hostname"
      timeout: 600  # Adjust the timeout to a higher value, e.g., 10 minutes

- name: Deploy Services via Swarm Leader
  hosts: nagios-monitor
  become: yes
  tasks:
    - name: Copy docker-compose.yml to nagios-monitor
      synchronize:
        src: "../docker-compose.yml"
        dest: "/home/expensify/deploy/"
        delete: yes

    - name: Deploy Docker Stack
      command: docker stack deploy -c /home/expensify/deploy/docker-compose.yml expensify_stack
      args:
        chdir: /home/expensify/deploy/  # Specify the working directory
      timeout: 600  # Adjust the timeout to a higher value, e.g., 10 minutes

- name: Configure SSH access from nagios-monitor
  hosts: nagios-monitor
  become: true
  tasks:
    - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
      openssh_keypair:
        path: /home/expensify/.ssh/id_rsa
        owner: expensify
        group: expensify

    - name: Fix owner of the generated pub key
      file:
        path: /home/expensify/.ssh/id_rsa.pub
        owner: expensify
        group: expensify

    - name: Fetch Nagios host public SSH key
      ansible.builtin.shell: cat /home/expensify/.ssh/id_rsa.pub
      register: nagios_public_key

    - name: Add Nagios host public SSH key to authorized_keys of other hosts
      ansible.builtin.copy:
        content: "{{ nagios_public_key.stdout }}"
        dest: "/home/expensify/.ssh/authorized_keys"
        mode: '0600'
      delegate_to: "{{ item }}"
      loop:
        - server-a
        - server-b
        - load-balancer

- name: Open necessary ports and protocols using UFW
  hosts: all
  become: true
  tasks:
    - name: Enable UFW
      community.general.ufw:
        state: enabled
        policy: allow

    - name: Allow SSH traffic # for now otherwise i can't run my ansible scripts
      community.general.ufw:
        rule: allow
        port: 22
        proto: tcp
      ignore_errors: yes  # Ignore errors in case UFW is already enabled

    - name: Allow Swarm Ports TCP
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "2376"
        - "2377"
        - "7946"

    - name: Allow Swarm Ports UDP
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop:
        - "7946"
        - "4789"

    - name: Allow Load-Balancer (TCP)
      community.general.ufw:
        rule: allow
        port: "60000:65000" 
        proto: tcp
      when: "'load-balancer' in inventory_hostname" 
    
    - name: Open port 5666 for NRPE plugin on load-balancer (TCP)
      community.general.ufw:
        rule: allow
        port: 5666
        proto: tcp
        from_ip: "{{ hostvars['nagios-monitor'].ansible_host }}"
      when: "'load-balancer' in inventory_hostname"
      
    - name: Open port 8080 for accessing hosted content on server-a
      community.general.ufw:
        rule: allow
        port: 8080
        proto: tcp
        from_ip: "{{ hostvars['load-balancer'].ansible_host }}"
      when: "'server-a' in inventory_hostname"
      
    - name: Open port 8081 for accessing hosted content on server-b
      community.general.ufw:
        rule: allow
        port: 8081
        proto: tcp
        from_ip: "{{ hostvars['load-balancer'].ansible_host }}"
      when: "'server-b' in inventory_hostname"

    - name: Open port 8083 for Nagios dashboard access
      community.general.ufw:
        rule: allow
        port: 8083
        proto: tcp
      when: "'nagios-monitor' in inventory_hostname"

    - name: Open port 5668 for NRPE plugin on server-a
      community.general.ufw:
        rule: allow
        port: 5668
        proto: tcp
        from_ip: "{{ hostvars['nagios-monitor'].ansible_host }}"
      when: "'server-a' in inventory_hostname"

    - name: Open port 5667 for NRPE plugin on server-b
      community.general.ufw:
        rule: allow
        port: 5667
        proto: tcp
        from_ip: "{{ hostvars['nagios-monitor'].ansible_host }}"
      when: "'server-b' in inventory_hostname"

    # - name: Reload UFW to apply rules
    #   community.general.ufw:
    #     state: enabled
    #     policy: allow

    # - name: Restart Docker
    #   service:
    #     name: docker
    #     state: restarted

# - name: Configure UFW limit SSH Access
#   hosts: [server-a, server-b, load-balancer ]
#   tasks:
#     - name: Allow SSH access from anywhere
#       community.general.ufw:
#         rule: allow
#         from_ip: nagios_monitor_ip
#         port: 22
#         proto: tcp

#     - name: Block unused ports
#       ufw:
#         rule: deny
#         port: "{{ item }}"
#       loop: "{{ range(1, 65536) | difference([22, 80, 60000, 60001, 65000]) }}"
#       # Keep the ports you want to keep open (SSH, HTTP, and your load balancer port range)

